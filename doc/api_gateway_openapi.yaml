openapi: 3.0.3
info:
  title: API Gateway
  version: "1.0.0"
  description: |
    API Gateway providing endpoints for:
    - Auth Service (login, register, logout, user/profile management)
    - Currency Service (roll, golden roll, buy currency)
    - Gacha Service (retrieve gachas by ID, name, all, or owned by the user)
    - Market Service (retrieve auctions, create auctions, bid, transaction history)
servers:
  - url: https://localhost:8000
    description: Local environment

security:
  - BearerAuth: []

components:
  securitySchemes:
    BearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT

  schemas:
    MessageResponse:
      type: object
      properties:
        message:
          type: string

    ErrorResponse:
      type: object
      properties:
        code:
          type: integer
        message:
          type: string

    BuyCurrencyRequest:
      type: object
      properties:
        quantity:
          type: integer
      required:
        - quantity

    RegisterRequest:
      type: object
      properties:
        FirstName:
          type: string
        LastName:
          type: string
        Email:
          type: string
          format: email
        Password:
          type: string
        CurrencyAmount:
          type: integer
      required:
        - FirstName
        - LastName
        - Email
        - Password

    LoginRequest:
      type: object
      properties:
        Email:
          type: string
          format: email
        Password:
          type: string
      required:
        - Email
        - Password

    UpdateUserRequest:
      type: object
      properties:
        FirstName:
          type: string
        LastName:
          type: string
        Email:
          type: string
          format: email
        Password:
          type: string
        CurrencyAmount:
          type: integer

    AuctionRequest:
      type: object
      properties:
        gacha_id:
          type: integer
        starting_price:
          type: number
        end_date:
          type: string
          format: date-time
      required:
        - gacha_id
        - starting_price
        - end_date

    BidRequest:
      type: object
      properties:
        bid:
          type: number
      required:
        - bid

    Gacha:
      type: object
      properties:
        GachaId:
          type: integer
        Name:
          type: string
        Type1:
          type: string
        Type2:
          type: string
        Total:
          type: integer
        HP:
          type: integer
        Attack:
          type: integer
        Defense:
          type: integer
        SpAtt:
          type: integer
        SpDef:
          type: integer
        Speed:
          type: integer
        Rarity:
          type: string
        Link:
          type: string
          format: uri
      required:
        - GachaId
        - Name
        - Type1
        - Total
        - HP
        - Attack
        - Defense
        - SpAtt
        - SpDef
        - Speed
        - Rarity
        - Link

paths:
  # General endpoint
  /:
    get:
      summary: Home endpoint
      description: Returns a status message from the API Gateway
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MessageResponse'


  # ======================
  # AUTH SERVICE ENDPOINTS
  # ======================

  /login:
    post:
      summary: User login (Auth Service)
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/LoginRequest'
      responses:
        '200':
          description: Login successful, returns token
        '400':
          description: Bad request
        '404':
          description: Not found
        '500':
          description: Internal server error
      tags:
        - AUTH SERVICE

  /register:
    post:
      summary: Register a new user (Auth Service)
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RegisterRequest'
      responses:
        '200':
          description: Registered successfully
        '400':
          description: Bad request
        '500':
          description: Internal server error
      tags:
        - AUTH SERVICE

  /delete_user:
    delete:
      summary: Delete a user (Auth Service)
      security:
        - BearerAuth: []
      responses:
        '200':
          description: User deleted successfully
        '401':
          description: Unauthorized
        '500':
          description: Internal server error
      tags:
        - AUTH SERVICE

  /logout:
    get:
      summary: User logout (Auth Service)
      security:
        - BearerAuth: []
      responses:
        '200':
          description: Logout successful
        '401':
          description: Unauthorized
        '500':
          description: Internal server error
      tags:
        - AUTH SERVICE

  /update_user:
    put:
      summary: Update user data (Auth Service)
      security:
        - BearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateUserRequest'
      responses:
        '200':
          description: User updated successfully
        '400':
          description: Bad request
        '401':
          description: Unauthorized
        '500':
          description: Internal server error
      tags:
        - AUTH SERVICE

  /check_users_profile:
    get:
      summary: Check users' profiles (Auth Service)
      responses:
        '200':
          description: Returns list of user profiles
        '500':
          description: Internal server error
      tags:
        - AUTH SERVICE


  # ===========================
  # CURRENCY SERVICE ENDPOINTS
  # ===========================

  /roll:
    get:
      summary: Perform a roll action (Currency Service)
      security:
        - BearerAuth: []
      responses:
        '200':
          description: Image content returned
          content:
            image/*:
              schema:
                type: string
                format: binary
        '401':
          description: Unauthorized
        '500':
          description: Internal server error
      tags:
        - CURRENCY SERVICE

  /golden_roll:
    get:
      summary: Perform a golden roll action (Currency Service)
      security:
        - BearerAuth: []
      responses:
        '200':
          description: Image content returned
          content:
            image/*:
              schema:
                type: string
                format: binary
        '401':
          description: Unauthorized
        '500':
          description: Internal server error
      tags:
        - CURRENCY SERVICE

  /buy_currency:
    put:
      summary: Buy currency (Currency Service)
      security:
        - BearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/BuyCurrencyRequest'
      responses:
        '200':
          description: Currency bought successfully
        '400':
          description: Bad request
        '401':
          description: Unauthorized
        '500':
          description: Internal server error
      tags:
        - CURRENCY SERVICE


  # ========================
  # GACHA SERVICE ENDPOINTS
  # ========================

  /gacha/get/{gacha_id}:
    get:
      summary: Retrieve a gacha by ID (Gacha Service)
      security:
        - BearerAuth: []
      parameters:
        - name: gacha_id
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Gacha retrieved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Gacha'
        '400':
          description: Bad request
        '401':
          description: Unauthorized
        '404':
          description: Gacha not found
        '500':
          description: Internal server error
      tags:
        - GACHA SERVICE

  /gacha/getName/{gacha_name}:
    get:
      summary: Retrieve a gacha by name (Gacha Service)
      security:
        - BearerAuth: []
      parameters:
        - name: gacha_name
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Gacha retrieved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Gacha'
        '400':
          description: Bad request
        '401':
          description: Unauthorized
        '404':
          description: Gacha not found
        '500':
          description: Internal server error
      tags:
        - GACHA SERVICE

  /gacha/get:
    get:
      summary: Retrieve all gachas (Gacha Service)
      security:
        - BearerAuth: []
      responses:
        '200':
          description: List of all gachas
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Gacha'
        '401':
          description: Unauthorized
        '404':
          description: Not found
        '500':
          description: Internal server error
      tags:
        - GACHA SERVICE

  /gacha/mygacha/{gacha_id}:
    get:
      summary: Retrieve a user's specific gacha by ID (Gacha Service)
      security:
        - BearerAuth: []
      parameters:
        - name: gacha_id
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: User's specific gacha retrieved
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Gacha'
        '400':
          description: Bad request
        '401':
          description: Unauthorized
        '404':
          description: Gacha not found
        '500':
          description: Internal server error
      tags:
        - GACHA SERVICE

  /gacha/mygacha:
    get:
      summary: Retrieve all gachas owned by the user (Gacha Service)
      security:
        - BearerAuth: []
      responses:
        '200':
          description: User's gachas retrieved
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Gacha'
        '401':
          description: Unauthorized
        '404':
          description: Not found
        '500':
          description: Internal server error
      tags:
        - GACHA SERVICE


  # ===========================
  # MARKET SERVICE ENDPOINTS
  # ===========================

  /auction:
    get:
      summary: Retrieve all auctions (Market Service)
      security:
        - BearerAuth: []
      responses:
        '200':
          description: List of auctions
        '401':
          description: Unauthorized
        '500':
          description: Internal server error
      tags:
        - MARKET SERVICE

  /new_auction:
    post:
      summary: Create a new auction (Market Service)
      security:
        - BearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AuctionRequest'
      responses:
        '200':
          description: Auction created successfully
        '400':
          description: Bad request
        '401':
          description: Unauthorized
        '500':
          description: Internal server error
      tags:
        - MARKET SERVICE

  /bid/{transaction_id}:
    put:
      summary: Place a new bid on an auction (Market Service)
      security:
        - BearerAuth: []
      parameters:
        - name: transaction_id
          in: path
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/BidRequest'
      responses:
        '200':
          description: Bid placed successfully
        '400':
          description: Bad request
        '401':
          description: Unauthorized
        '500':
          description: Internal server error
      tags:
        - MARKET SERVICE

  /my_transaction_history:
    get:
      summary: Retrieve the user's transaction history (Market Service)
      security:
        - BearerAuth: []
      responses:
        '200':
          description: Transaction history retrieved
        '401':
          description: Unauthorized
        '500':
          description: Internal server error
      tags:
        - MARKET SERVICE
