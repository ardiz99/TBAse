{
	"info": {
		"_postman_id": "d7b0b5ac-b70b-49fb-88b1-7ab3d09842b7",
		"name": "currency_service_ut",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "39688518"
	},
	"item": [
		{
			"name": "Roll_info",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Response status is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"pm.test(\"Response has correct data\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData.code).to.eql(200);\r",
							"    pm.expect(jsonData.data).to.have.property(\"GachaId\");\r",
							"    pm.expect(jsonData.data).to.have.property(\"Name\");\r",
							"});\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{jwt_token}}",
							"type": "string"
						}
					]
				},
				"method": "GET",
				"header": [],
				"url": {
					"raw": "https://localhost:5004/roll_info/100?email=alice@example.com",
					"protocol": "https",
					"host": [
						"localhost"
					],
					"port": "5004",
					"path": [
						"roll_info",
						"100"
					],
					"query": [
						{
							"key": "email",
							"value": "alice@example.com"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Roll_info_no_email",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Response status is 400\", function () {\r",
							"    pm.response.to.have.status(400);\r",
							"});\r",
							"\r",
							"pm.test(\"Error message for missing email\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData.code).to.eql(400);\r",
							"    pm.expect(jsonData.message).to.include(\"Bad Request\");\r",
							"});\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{jwt_token}}",
							"type": "string"
						}
					]
				},
				"method": "GET",
				"header": [],
				"url": {
					"raw": "https://localhost:5004/roll_info/10",
					"protocol": "https",
					"host": [
						"localhost"
					],
					"port": "5004",
					"path": [
						"roll_info",
						"10"
					]
				}
			},
			"response": []
		},
		{
			"name": "Roll_info_invalid_cost",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Response status is 400\", function () {\r",
							"    pm.response.to.have.status(400);\r",
							"});\r",
							"\r",
							"pm.test(\"Error message for invalid cost\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData.code).to.eql(400);\r",
							"    pm.expect(jsonData.message).to.include(\"Bad Request\");\r",
							"});\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{jwt_token}}",
							"type": "string"
						}
					]
				},
				"method": "GET",
				"header": [],
				"url": {
					"raw": "https://localhost:5004/roll_info/50?email=alice@example.com",
					"protocol": "https",
					"host": [
						"localhost"
					],
					"port": "5004",
					"path": [
						"roll_info",
						"50"
					],
					"query": [
						{
							"key": "email",
							"value": "alice@example.com"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Roll_info_no_rarity_gacha",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Response status is 400\", function () {\r",
							"    pm.response.to.have.status(500);\r",
							"});\r",
							"\r",
							"pm.test(\"Error message for unavailable gacha rarity\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData.code).to.eql(500);\r",
							"    pm.expect(jsonData.message).to.include(\"Bad Request.\");\r",
							"});\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{jwt_token}}",
							"type": "string"
						}
					]
				},
				"method": "GET",
				"header": [],
				"url": {
					"raw": "https://localhost:5004/roll_info/10?email=alice@example.com",
					"protocol": "https",
					"host": [
						"localhost"
					],
					"port": "5004",
					"path": [
						"roll_info",
						"10"
					],
					"query": [
						{
							"key": "email",
							"value": "alice@example.com"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Roll_info_invalid_rarity_distrib",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Response status is 500\", function () {\r",
							"    pm.response.to.have.status(400);\r",
							"});\r",
							"\r",
							"pm.test(\"Error message for invalid rarity distribution\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData.code).to.eql(400);\r",
							"    pm.expect(jsonData.message).to.include(\"Bad Request.\");\r",
							"});\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{jwt_token}}",
							"type": "string"
						}
					]
				},
				"method": "GET",
				"header": [],
				"url": {
					"raw": "https://localhost:5004/roll_info/10?email=alice@example.com",
					"protocol": "https",
					"host": [
						"localhost"
					],
					"port": "5004",
					"path": [
						"roll_info",
						"10"
					],
					"query": [
						{
							"key": "email",
							"value": "alice@example.com"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Roll_info_insufficient_founds",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Response status is 500\", function () {\r",
							"    pm.response.to.have.status(400);\r",
							"});\r",
							"\r",
							"pm.test(\"Error message for insufficient funds\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData.code).to.eql(400);\r",
							"    pm.expect(jsonData.message).to.include(\"Insufficient Pokedollars\");\r",
							"});\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{jwt_token}}",
							"type": "string"
						}
					]
				},
				"method": "GET",
				"header": [],
				"url": {
					"raw": "https://localhost:5004/roll_info/10?email=alice@example.com",
					"protocol": "https",
					"host": [
						"localhost"
					],
					"port": "5004",
					"path": [
						"roll_info",
						"10"
					],
					"query": [
						{
							"key": "email",
							"value": "alice@example.com"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "buy_currency",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Response status is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"pm.test(\"Currency amount updated\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData.code).to.eql(200);\r",
							"    pm.expect(jsonData.message).to.include(\"Currency amount updated successfully\");\r",
							"});\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{jwt_token}}",
							"type": "string"
						}
					]
				},
				"method": "PUT",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n  \"quantity\": 100,\r\n  \"email\": \"alice@example.com\"\r\n}\r\n",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "https://localhost:5004/buy_currency",
					"protocol": "https",
					"host": [
						"localhost"
					],
					"port": "5004",
					"path": [
						"buy_currency"
					]
				}
			},
			"response": []
		},
		{
			"name": "buy_currency_no_email",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Response status is 400\", function () {\r",
							"    pm.response.to.have.status(400);\r",
							"});\r",
							"\r",
							"pm.test(\"Error message for missing email\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData.code).to.eql(400);\r",
							"    pm.expect(jsonData.message).to.include(\"Bad Request\");\r",
							"});\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{jwt_token}}",
							"type": "string"
						}
					]
				},
				"method": "PUT",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n  \"quantity\": 100\r\n}\r\n",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "https://localhost:5004/buy_currency",
					"protocol": "https",
					"host": [
						"localhost"
					],
					"port": "5004",
					"path": [
						"buy_currency"
					]
				}
			},
			"response": []
		},
		{
			"name": "buy_currency_invalid_quantity",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Response status is 500\", function () {\r",
							"    pm.response.to.have.status(500);\r",
							"});\r",
							"\r",
							"pm.test(\"Error message for negative quantity\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData.code).to.eql(500);\r",
							"    pm.expect(jsonData.message).to.include(\"You can't add a negative quantity.\");\r",
							"});\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{jwt_token}}",
							"type": "string"
						}
					]
				},
				"method": "PUT",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n  \"quantity\": -50,\r\n  \"email\": \"alice@example.com\"\r\n}\r\n",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "https://localhost:5004/buy_currency",
					"protocol": "https",
					"host": [
						"localhost"
					],
					"port": "5004",
					"path": [
						"buy_currency"
					]
				}
			},
			"response": []
		},
		{
			"name": "Roll_img",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Response status is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"pm.test(\"Response is an image\", function () {\r",
							"    pm.response.to.be.ok;\r",
							"    pm.response.to.have.header(\"Content-Type\", \"image/png\");\r",
							"});\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{jwt_token}}",
							"type": "string"
						}
					]
				},
				"method": "GET",
				"header": [],
				"url": {
					"raw": "https://localhost:5004/roll_img?url=/img/charmander.png",
					"protocol": "https",
					"host": [
						"localhost"
					],
					"port": "5004",
					"path": [
						"roll_img"
					],
					"query": [
						{
							"key": "url",
							"value": "/img/charmander.png"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "roll_img_invalid_path",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Response status is 404\", function () {\r",
							"    pm.response.to.have.status(404);\r",
							"});\r",
							"\r",
							"pm.test(\"Error message for invalid file path\", function () {\r",
							"    pm.response.to.be.error;\r",
							"});\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{jwt_token}}",
							"type": "string"
						}
					]
				},
				"method": "GET",
				"header": [],
				"url": {
					"raw": "https://localhost:5004/roll_img?url=/img/nessunpokemon.png",
					"protocol": "https",
					"host": [
						"localhost"
					],
					"port": "5004",
					"path": [
						"roll_img"
					],
					"query": [
						{
							"key": "url",
							"value": "/img/nessunpokemon.png"
						}
					]
				}
			},
			"response": []
		}
	]
}