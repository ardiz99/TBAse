{
	"info": {
		"_postman_id": "88c3b395-a86e-4a08-8118-e97dc20dd86e",
		"name": "auth_service_ut",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "39688518"
	},
	"item": [
		{
			"name": "register_successful",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"pm.test(\"Registrazione avvenuta con successo!\", function () {\r",
							"    const response = pm.response.json();\r",
							"    pm.expect(response.message).to.eql(\"Registration seccessful \");\r",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n  \"FirstName\": \"Alice\",\r\n  \"LastName\": \"Smith\",\r\n  \"Email\": \"alice@example.com\",\r\n  \"Password\": \"securepassword\",\r\n  \"CurrencyAmount\": \"100\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "https://127.0.0.1:5001/register",
					"protocol": "https",
					"host": [
						"127",
						"0",
						"0",
						"1"
					],
					"port": "5001",
					"path": [
						"register"
					]
				}
			},
			"response": []
		},
		{
			"name": "already_register",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 400\", function () {\r",
							"    pm.response.to.have.status(400);\r",
							"});\r",
							"\r",
							"pm.test(\"Bad Request.\", function () {\r",
							"    const response = pm.response.json();\r",
							"    pm.expect(response.message).to.eql(\"Bad Request. /\");\r",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n  \"FirstName\": \"Alice\",\r\n  \"LastName\": \"Smith\",\r\n  \"Email\": \"alice@example.com\",\r\n  \"Password\": \"securepassword\",\r\n  \"CurrencyAmount\": \"100\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "https://127.0.0.1:5001/register",
					"protocol": "https",
					"host": [
						"127",
						"0",
						"0",
						"1"
					],
					"port": "5001",
					"path": [
						"register"
					]
				}
			},
			"response": []
		},
		{
			"name": "register_admin_successful",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"pm.test(\"Response contains token\", function () {\r",
							"    const jsonData = pm.response.json();\r",
							"    pm.expect(jsonData.data).to.not.be.undefined;\r",
							"});\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"FirstName\": \"Admin\",\r\n    \"LastName\": \"User\",\r\n    \"Email\": \"admin@example.com\",\r\n    \"Password\": \"adminpassword\"\r\n}\r\n",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "https://127.0.0.1:5001/register_admin",
					"protocol": "https",
					"host": [
						"127",
						"0",
						"0",
						"1"
					],
					"port": "5001",
					"path": [
						"register_admin"
					]
				}
			},
			"response": []
		},
		{
			"name": "login_successful",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"let response = pm.response.json();\r",
							"pm.environment.set(\"jwt_token\", response.data);\r",
							"\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"pm.test(\"Response message is success\", function () {\r",
							"    pm.expect(response.message).to.eql(\"Login successful\");\r",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{jwt_token}}",
							"type": "string"
						}
					]
				},
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"Email\": \"alice@example.com\",\r\n    \"Password\": \"securepassword\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "https://127.0.0.1:5001/login",
					"protocol": "https",
					"host": [
						"127",
						"0",
						"0",
						"1"
					],
					"port": "5001",
					"path": [
						"login"
					]
				}
			},
			"response": []
		},
		{
			"name": "login_successful_wrong_password",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"let response = pm.response.json();\r",
							"pm.environment.set(\"jwt_token\", response.data);\r",
							"\r",
							"pm.test(\"Status code is 500\", function () {\r",
							"    pm.response.to.have.status(500);\r",
							"});\r",
							"\r",
							"pm.test(\"Error message is 'Invalid password credentials'\", function () {\r",
							"    pm.expect(response.error).to.eql(\"Unkonwn error / Unkonwn error / verify_password failed\");\r",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{jwt_token}}",
							"type": "string"
						}
					]
				},
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"Email\": \"alice@example.com\",\r\n    \"Password\": \"wrongPassword\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "https://127.0.0.1:5001/login",
					"protocol": "https",
					"host": [
						"127",
						"0",
						"0",
						"1"
					],
					"port": "5001",
					"path": [
						"login"
					]
				}
			},
			"response": []
		},
		{
			"name": "login_successful_non_existent_user",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"let response = pm.response.json();\r",
							"pm.environment.set(\"jwt_token\", response.data);\r",
							"\r",
							"pm.test(\"Status code is 404\", function () {\r",
							"    pm.response.to.have.status(404);\r",
							"});\r",
							"\r",
							"pm.test(\"Error message is 'Error! Not Found.  / Error! Not Found'\", function () {\r",
							"    pm.expect(response.error).to.eql(\"Error! Not Found.  / Error! Not Found\");\r",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{jwt_token}}",
							"type": "string"
						}
					]
				},
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"Email\": \"tizioacaso@example.com\",\r\n    \"Password\": \"passwordacaso\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "https://127.0.0.1:5001/login",
					"protocol": "https",
					"host": [
						"127",
						"0",
						"0",
						"1"
					],
					"port": "5001",
					"path": [
						"login"
					]
				}
			},
			"response": []
		},
		{
			"name": "update_user_successful",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"pm.test(\"Response message is success\", function () {\r",
							"    const response = pm.response.json();\r",
							"    pm.expect(response).to.eql(\"Aggiornamento avvenuto con successo\");\r",
							"});\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "PUT",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n  \"FirstName\": \"AliceUpdated\",\r\n  \"LastName\": \"SmithUpdated\",\r\n  \"Email\": \"alice@example.com\",\r\n  \"Password\": \"newpassword\",\r\n  \"CurrencyAmount\": \"200\"\r\n}\r\n",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "https://127.0.0.1:5001/update_user",
					"protocol": "https",
					"host": [
						"127",
						"0",
						"0",
						"1"
					],
					"port": "5001",
					"path": [
						"update_user"
					]
				}
			},
			"response": []
		},
		{
			"name": "update_user_missing_required_fields",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 400\", function () {\r",
							"    pm.response.to.have.status(400);\r",
							"});\r",
							"\r",
							"pm.test(\"Error message is 'Missing fields'\", function () {\r",
							"    const response = pm.response.json();\r",
							"    pm.expect(response[\"error=\"]).to.eql(\"Missing fields\");\r",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "PUT",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n  \"FirstName\": \"Incomplete\"\r\n}\r\n",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "https://localhost:5001/update_user",
					"protocol": "https",
					"host": [
						"localhost"
					],
					"port": "5001",
					"path": [
						"update_user"
					]
				}
			},
			"response": []
		},
		{
			"name": "check_users",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"pm.test(\"Response contains data\", function () {\r",
							"    const response = pm.response.json();\r",
							"    pm.expect(response).to.be.an(\"object\");\r",
							"});\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "https://localhost:5001/check_users_profile",
					"protocol": "https",
					"host": [
						"localhost"
					],
					"port": "5001",
					"path": [
						"check_users_profile"
					]
				}
			},
			"response": []
		},
		{
			"name": "check_users_failed",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 400\", function () {\r",
							"    pm.response.to.have.status(400);\r",
							"});\r",
							"\r",
							"pm.test(\"Error message is 'Failed to retrieve profiles'\", function () {\r",
							"    const response = pm.response.json();\r",
							"    pm.expect(response.error).to.eql(\"Failed to retrieve profiles\");\r",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{jwt_token}}",
							"type": "string"
						}
					]
				},
				"method": "GET",
				"header": [],
				"url": {
					"raw": "https://localhost:5001/check_users_profile",
					"protocol": "https",
					"host": [
						"localhost"
					],
					"port": "5001",
					"path": [
						"check_users_profile"
					]
				}
			},
			"response": []
		},
		{
			"name": "Logout",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"pm.test(\"Response contains data\", function () {\r",
							"    const response = pm.response.json();\r",
							"    pm.expect(response).to.be.an(\"object\");\r",
							"});\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "https://localhost:5001/logout",
					"protocol": "https",
					"host": [
						"localhost"
					],
					"port": "5001",
					"path": [
						"logout"
					]
				}
			},
			"response": []
		},
		{
			"name": "Logout_failed",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 400\", function () {\r",
							"    pm.response.to.have.status(400);\r",
							"});\r",
							"\r",
							"pm.test(\"Error message is 'Failed to retrieve profiles'\", function () {\r",
							"    const response = pm.response.json();\r",
							"    pm.expect(response.error).to.eql(\"Failed to retrieve profiles\");\r",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "https://localhost:5001/check_users_profile",
					"protocol": "https",
					"host": [
						"localhost"
					],
					"port": "5001",
					"path": [
						"check_users_profile"
					]
				}
			},
			"response": []
		},
		{
			"name": "delete_user_successful",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"pm.test(\"Response message is Delete done\", function () {\r",
							"    const response = pm.response.json();\r",
							"    pm.expect(response).to.eql(\"Delete done!\");\r",
							"});\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "DELETE",
				"header": [],
				"url": {
					"raw": "https://127.0.0.1:5001/delete_user?Email=ali@example.com&Password=securepassword",
					"protocol": "https",
					"host": [
						"127",
						"0",
						"0",
						"1"
					],
					"port": "5001",
					"path": [
						"delete_user"
					],
					"query": [
						{
							"key": "Email",
							"value": "ali@example.com"
						},
						{
							"key": "Password",
							"value": "securepassword"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "delete_user_nonexistent_user",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 400\", function () {\r",
							"    pm.response.to.have.status(400);\r",
							"});\r",
							"\r",
							"pm.test(\"Error message is 'Invalid credentials'\", function () {\r",
							"    const response = pm.response.json();\r",
							"    pm.expect(response.error).to.eql(\"Invalid credentials\");\r",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "DELETE",
				"header": [],
				"url": {
					"raw": "https://localhost:5001/delete_user?Email=nonexistent@example.com&Password=something",
					"protocol": "https",
					"host": [
						"localhost"
					],
					"port": "5001",
					"path": [
						"delete_user"
					],
					"query": [
						{
							"key": "Email",
							"value": "nonexistent@example.com"
						},
						{
							"key": "Password",
							"value": "something"
						}
					]
				}
			},
			"response": []
		}
	]
}