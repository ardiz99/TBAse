# Definisce il nome del workflow CI/CD per i microservizi, utile per identificare il workflow nella lista di GitHub Actions
name: CI/CD Pipeline for Microservices

# Specifica gli eventi che attiveranno il workflow
on:
  push:
    branches:
      - main  # Il workflow viene eseguito su ogni push al ramo 'main'
  pull_request:
    branches:
      - main  # Il workflow viene eseguito anche per ogni pull request verso il ramo 'main'

jobs:
  build-and-test-services:
    runs-on: ubuntu-latest  # Esegue il job su un ambiente Ubuntu aggiornato
    steps:
      - name: Check out the repository
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.12'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install ./src/currency_service/requirements.txt

      - name: Run tests
        run: |
          pip install pytest
          pytest

      - name: Build Docker images for auth
        run: |
          docker build -t auth_image -f ./src/auth_service/Dockerfile_test .
      - name: run Docker images for auth
        run: |
          docker run --name auth_cont -d -p 5001:5001 auth_image

      - name: Build Docker images for gacha
        run: |
          docker build -t gacha_image -f ./src/gacha_service/Dockerfile_test .

      - name: run Docker images for gacha
        run: |
          docker run --name gacha_cont -d -p 5002:5002 gacha_image

      - name: Build Docker images for currency
        run: |
          docker build -t currency_image -f ./src/currency_service/Dockerfile_test .

      - name: run Docker images for currency
        run: |
          docker run --name currency_cont -d -p 5004:5004 currency_image

      - name: Build Docker images for market
        run: |
          docker build -t market_image -f ./src/market_service/Dockerfile_test .

      - name: run Docker images for market
        run: |
          docker run --name market_cont -d -p 5003:5003 market_image

      # Ferma e rimuove tutti i container Docker dopo i test
      - name: Tear down Docker containers after unit tests
        if: always()
        run: |
          docker stop auth_cont gacha_cont currency_cont market_cont || true
          docker rm auth_cont gacha_cont currency_cont market_cont || true
